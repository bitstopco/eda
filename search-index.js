crystal_doc_search_index_callback({"repository_name":"github.com/onyxframework/eda","body":"<a href=\"https://onyxframework.org\"><img width=\"100\" height=\"100\" src=\"https://onyxframework.org/img/logo.svg\"></a>\n\n# Onyx::EDA\n\n[![Built with Crystal](https://img.shields.io/badge/built%20with-crystal-000000.svg?style=flat-square)](https://crystal-lang.org/)\n[![Travis CI build](https://img.shields.io/travis/onyxframework/eda/master.svg?style=flat-square)](https://travis-ci.org/onyxframework/eda)\n[![API docs](https://img.shields.io/badge/api_docs-online-brightgreen.svg?style=flat-square)](https://api.onyxframework.org/eda)\n[![Latest release](https://img.shields.io/github/release/onyxframework/eda.svg?style=flat-square)](https://github.com/onyxframework/eda/releases)\n\nAn Event-Driven Architecture framework to build reactive apps.\n\n## Supporters ‚ù§Ô∏è\n\nThanks to all my patrons, I can continue working on beautiful Open Source Software! üôè\n\n[Lauri Jutila](https://github.com/ljuti), [Alexander Maslov](https://seendex.ru), Dainel Vera\n\n*You can become a patron too in exchange of prioritized support and other perks*\n\n<a href=\"https://www.patreon.com/vladfaust\"><img height=\"50\" src=\"https://onyxframework.org/img/patreon-button.svg\"></a>\n\n## About üëã\n\nOnyx::EDA is an [Event-Driven Architecture](https://en.wikipedia.org/wiki/Event-driven_architecture) framework. It allows to emit certain *events* and subscribe to them.\n\nIt has several *channels* implemented:\n\n* [In-memory channel](https://api.onyxframework.org/eda/Onyx/EDA/Channel.html)\n* [Redis channel](https://api.onyxframework.org/eda/Onyx/EDA/Channel/Redis.html) (working on [Redis streams](https://redis.io/topics/streams-intro))\n\n## Installation üì•\n\nAdd this to your application's `shard.yml`:\n\n```yaml\ndependencies:\n  onyx-eda:\n    github: onyxframework/eda\n    version: ~> 0.2.0\n```\n\nThis shard follows [Semantic Versioning v2.0.0](http://semver.org/), so check [releases](https://github.com/onyxframework/rest/releases) and change the `version` accordingly. Please visit [github.com/crystal-lang/shards](https://github.com/crystal-lang/shards) to know more about Crystal shards.\n\n## Usage üíª\n\nFirst of all, you need to create a channel:\n\n```crystal\nrequire \"onyx-eda\"\nchannel = Onyx::EDA::Channel.new\n\n# or\n#\n\nrequire \"onyx-eda\"\nrequire \"onyx-eda/channel/redis\"\n\nchannel = Onyx::EDA::Channel::Redis.new(\"redis://localhost:6379\")\n```\n\nThen define events to emit:\n\n```crystal\nstruct MyEvent\n  include Onyx::EDA::Event\n\n  getter foo\n\n  def initialize(@foo : String)\n  end\nend\n```\n\nSubscribe an object to the event:\n\n```crystal\n# Top-level subscription\nchannel.subscribe(Object, MyEvent) do |event|\n  pp event.foo\nend\n\n# Object-level subscriptions\n#\n\nclass Notifier\n  def initialize(channel)\n    channel.subscribe(self, MyEvent) do |event|\n      pp event.foo\n    end\n  end\nend\n\nnotifier = Notifier.new(channel)\n```\n\nThen emit the event:\n\n```crystal\nchannel.emit(MyEvent.new(\"bar\"))\n```\n\nAll subscribers will asynchronously notified of the new event. You can then unsubscribe:\n\n```crystal\nchannel.unsubscribe(notifier)\n```\n\n### Using with Onyx top-level macros\n\n[Onyx](https://github.com/onyxframework/onyx) shard has convenient macros to reduce boilerplate code. Once [`\"onyx/eda\"`](https://github.com/onyxframework/onyx#eda) is required, a singleton `Onyx.channel` is defined. You can then specify which channel to use, for example, `Onyx.channel(:redis)`.\n\n```crystal\nrequire \"onyx/eda\"\n\nstruct MyEvent\n  # ditto\nend\n\nOnyx.channel(:redis)\n\nOnyx.subscribe(Object, MyEvent) do |event|\n  # ditto\nend\n\nOnyx.emit(MyEvent.new(\"bar\"))\n# or\nOnyx.channel.emit(MyEvent.new(\"bar\"))\n\nsleep(0.1)\n\nOnyx.unsubscibe(Object)\n```\n\n## Community üç™\n\nThere are multiple places to talk about this particular shard and about other ones as well:\n\n* [Onyx::EDA Gitter chat](https://gitter.im/onyxframework/eda)\n* [Onyx Framework Gitter community](https://gitter.im/onyxframework)\n* [Vlad Faust Gitter community](https://gitter.im/vladfaust)\n* [Onyx Framework Twitter](https://twitter.com/onyxframework)\n* [Onyx Framework Telegram channel](https://telegram.me/onyxframework)\n\n## Support ‚ù§Ô∏è\n\nThis shard is maintained by me, [Vlad Faust](https://vladfaust.com), a passionate developer with years of programming and product experience. I love creating Open-Source and I want to be able to work full-time on Open-Source projects.\n\nI will do my best to answer your questions in the free communication channels above, but if you want prioritized support, then please consider becoming my patron. Your issues will be labeled with your patronage status, and if you have a sponsor tier, then you and your team be able to communicate with me in private or semi-private channels such as e-mail and [Twist](https://twist.com). There are other perks to consider, so please, don't hesistate to check my Patreon page:\n\n<a href=\"https://www.patreon.com/vladfaust\"><img height=\"50\" src=\"https://onyxframework.org/img/patreon-button.svg\"></a>\n\nYou could also help me a lot if you leave a star to this GitHub repository and spread the world about Crystal and Onyx! üì£\n\n## Contributing\n\n1. Fork it ( https://github.com/onyxframework/eda/fork )\n2. Create your feature branch (git checkout -b my-new-feature)\n3. Commit your changes (git commit -am 'feat: some feature') using [Angular style commits](https://github.com/angular/angular/blob/master/CONTRIBUTING.md#commit)\n4. Push to the branch (git push origin my-new-feature)\n5. Create a new Pull Request\n\n## Contributors\n\n- [Vlad Faust](https://github.com/vladfaust) - creator and maintainer\n\n## Licensing\n\nThis software is licensed under [MIT License](LICENSE).\n\n[![Open Source Initiative](https://upload.wikimedia.org/wikipedia/commons/thumb/4/42/Opensource.svg/100px-Opensource.svg.png)](https://opensource.org/licenses/MIT)\n","program":{"html_id":"github.com/onyxframework/eda/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"github.com/onyxframework/eda","program":true,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"github.com/onyxframework/eda/Onyx","path":"Onyx.html","kind":"module","full_name":"Onyx","name":"Onyx","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"onyx-eda.cr","line_number":3,"url":"https://github.com/onyxframework/eda/blob/6a6a7d56b820aca7b5ead0cee6a063627d3287a4/src/onyx-eda.cr"}],"repository_name":"github.com/onyxframework/eda","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":"Powerful framework for modern applications.\nSee [onyxframework.org](https://onyxframework.org).","summary":"<p>Powerful framework for modern applications.</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"github.com/onyxframework/eda/Onyx/EDA","path":"Onyx/EDA.html","kind":"module","full_name":"Onyx::EDA","name":"EDA","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"onyx-eda.cr","line_number":5,"url":"https://github.com/onyxframework/eda/blob/6a6a7d56b820aca7b5ead0cee6a063627d3287a4/src/onyx-eda.cr"},{"filename":"onyx-eda/channel.cr","line_number":3,"url":"https://github.com/onyxframework/eda/blob/6a6a7d56b820aca7b5ead0cee6a063627d3287a4/src/onyx-eda/channel.cr"},{"filename":"onyx-eda/channel/redis.cr","line_number":7,"url":"https://github.com/onyxframework/eda/blob/6a6a7d56b820aca7b5ead0cee6a063627d3287a4/src/onyx-eda/channel/redis.cr"}],"repository_name":"github.com/onyxframework/eda","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/onyxframework/eda/Onyx","kind":"module","full_name":"Onyx","name":"Onyx"},"doc":"Event-Driven Architecture framework. Read more at [Wikipedia](https://en.wikipedia.org/wiki/Event-driven_architecture).","summary":"<p>Event-Driven Architecture framework.</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"github.com/onyxframework/eda/Onyx/EDA/Channel","path":"Onyx/EDA/Channel.html","kind":"class","full_name":"Onyx::EDA::Channel","name":"Channel","abstract":false,"superclass":{"html_id":"github.com/onyxframework/eda/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/onyxframework/eda/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/onyxframework/eda/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"onyx-eda/channel.cr","line_number":13,"url":"https://github.com/onyxframework/eda/blob/6a6a7d56b820aca7b5ead0cee6a063627d3287a4/src/onyx-eda/channel.cr"}],"repository_name":"github.com/onyxframework/eda","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[{"html_id":"github.com/onyxframework/eda/Onyx/EDA/Channel/Redis","kind":"class","full_name":"Onyx::EDA::Channel::Redis","name":"Redis"}],"including_types":[],"namespace":{"html_id":"github.com/onyxframework/eda/Onyx/EDA","kind":"module","full_name":"Onyx::EDA","name":"EDA"},"doc":"An in-memory event channel.\n**Asynchronously** notifies all its subscribers on a new `Event`.\n\n```\nchannel = Onyx::EDA::Channel.new\nchannel.subscribe(Object, MyEvent) { |e| pp e }\nchannel.emit(MyEvent.new)\nsleep(0.01) # Need to yield the control, because all notifications are async\n```","summary":"<p>An in-memory event channel.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"emit(events:Enumerable(T))forallT-instance-method","html_id":"emit(events:Enumerable(T))forallT-instance-method","name":"emit","doc":"Emit *events*, notifying all its subscribers.","summary":"<p>Emit <em>events</em>, notifying all its subscribers.</p>","abstract":false,"args":[{"name":"events","doc":null,"default_value":"","external_name":"events","restriction":"Enumerable(T)"}],"args_string":"(events : Enumerable(T)) forall T","source_link":"https://github.com/onyxframework/eda/blob/6a6a7d56b820aca7b5ead0cee6a063627d3287a4/src/onyx-eda/channel.cr#L20","def":{"name":"emit","args":[{"name":"events","doc":null,"default_value":"","external_name":"events","restriction":"Enumerable(T)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"events.each do |event|\n  notify(event)\nend"}},{"id":"emit(*events:*T)forallT-instance-method","html_id":"emit(*events:*T)forallT-instance-method","name":"emit","doc":"Emit *events*, notifying all its subscribers.","summary":"<p>Emit <em>events</em>, notifying all its subscribers.</p>","abstract":false,"args":[{"name":"events","doc":null,"default_value":"","external_name":"events","restriction":"*T"}],"args_string":"(*events : <span class=\"o\">*</span><span class=\"t\">T</span>) forall T","source_link":"https://github.com/onyxframework/eda/blob/6a6a7d56b820aca7b5ead0cee6a063627d3287a4/src/onyx-eda/channel.cr#L15","def":{"name":"emit","args":[{"name":"events","doc":null,"default_value":"","external_name":"events","restriction":"*T"}],"double_splat":null,"splat_index":0,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"emit(events)"}},{"id":"subscribe(object,event:T.class,&proc:T->Nil):Enumerable(String)forallT-instance-method","html_id":"subscribe(object,event:T.class,&amp;proc:T-&gt;Nil):Enumerable(String)forallT-instance-method","name":"subscribe","doc":"Subscribe an *object* to *event*, calling *proc* on event emit.\n\nChannel distinguishes subscribers by their `object.hash`.\nYou can have a single object subscribed to multiple events with multiple procs.\nYou can specify an abstract object, as well as a module in addition to\nstandard class and struct as *event*.\n\nReturns an array of the **newly** added event class names to watch,\nskipping those which already have *at least one* subscriber.\n\nBUG: You currently can not pass a `Union` as an *event* argument.\nPlease subscribe multiple times with different events instead.\n\n```\nabstract struct AppEvent < Onyx::EDA::Event\nend\n\nstruct MyEvent < AppEvent\n  getter foo\n\n  def initialize(@foo : String)\n  end\nend\n\nchannel.subscribe(Object, AppEvent) do |event|\n  pp event.foo\nend # => [\"MyEvent\"]\n\nchannel.subscribe(Object, MyEvent) do |event|\n  pp event.foo\nend # => []\n\nchannel.emit(MyEvent.new(\"bar\")) # Will print \"bar\" two times\n```\n\nYou obviously can use it within objects as well:\n\n```\nclass Notifier\n  def initialize(channel)\n    channel.subscribe(self, MyEvent) { }\n  end\n\n  def stop\n    channel.unsubscribe(self)\n  end\nend\n\nnotifier = Notifier.new(channel)\n\n# ...\n\nchannel.unsubscribe(notifier)\n# Or\nnotifier.stop\n```","summary":"<p>Subscribe an <em>object</em> to <em>event</em>, calling <em>proc</em> on event emit.</p>","abstract":false,"args":[{"name":"object","doc":null,"default_value":"","external_name":"object","restriction":""},{"name":"event","doc":null,"default_value":"","external_name":"event","restriction":"T.class"}],"args_string":"(object, event : <span class=\"t\">T</span>.<span class=\"k\">class</span>, &proc : T -> Nil) : Enumerable(String) forall T","source_link":"https://github.com/onyxframework/eda/blob/6a6a7d56b820aca7b5ead0cee6a063627d3287a4/src/onyx-eda/channel.cr#L82","def":{"name":"subscribe","args":[{"name":"object","doc":null,"default_value":"","external_name":"object","restriction":""},{"name":"event","doc":null,"default_value":"","external_name":"event","restriction":"T.class"}],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"proc","doc":null,"default_value":"","external_name":"proc","restriction":"(T -> Nil)"},"return_type":"Enumerable(String)","visibility":"Public","body":"add_subscription(object, event, &proc)"}},{"id":"unsubscribe(object,event:T.class,&proc:T->Nil):Enumerable(String)forallT-instance-method","html_id":"unsubscribe(object,event:T.class,&amp;proc:T-&gt;Nil):Enumerable(String)forallT-instance-method","name":"unsubscribe","doc":"Unsubscribe an *object* from *event* notifications by *proc*.\nThe mentioned proc will not be called again for this subscriber.\n\nNOTE: You should pass exactly the same proc object.\n`ProcNotSubscribedError` is raised otherwise.\n\nReturns an array of event class names which are not watched anymore,\ni.e. those which have *zero* subscribers after this method call.\n\n```\nproc = ->(e : MyEvent) { pp e }\n\nchannel.subscribe(Object, MyEvent, &proc)\n\n# Would raise ProcNotSubscribedError\nchannel.unsubscribe(Object, MyEvent) do |e|\n  pp e\nend\n\n# OK\nchannel.unsubscribe(Object, MyEvent, &proc) # => [\"MyEvent\"]\n```","summary":"<p>Unsubscribe an <em>object</em> from <em>event</em> notifications by <em>proc</em>.</p>","abstract":false,"args":[{"name":"object","doc":null,"default_value":"","external_name":"object","restriction":""},{"name":"event","doc":null,"default_value":"","external_name":"event","restriction":"T.class"}],"args_string":"(object, event : <span class=\"t\">T</span>.<span class=\"k\">class</span>, &proc : T -> Nil) : Enumerable(String) forall T","source_link":"https://github.com/onyxframework/eda/blob/6a6a7d56b820aca7b5ead0cee6a063627d3287a4/src/onyx-eda/channel.cr#L108","def":{"name":"unsubscribe","args":[{"name":"object","doc":null,"default_value":"","external_name":"object","restriction":""},{"name":"event","doc":null,"default_value":"","external_name":"event","restriction":"T.class"}],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"proc","doc":null,"default_value":"","external_name":"proc","restriction":"(T -> Nil)"},"return_type":"Enumerable(String)","visibility":"Public","body":"remove_subscription(object, event, &proc)"}},{"id":"unsubscribe(object,event:T.class):Enumerable(String)forallT-instance-method","html_id":"unsubscribe(object,event:T.class):Enumerable(String)forallT-instance-method","name":"unsubscribe","doc":"Unsubscribe an *object* from all *event* notifications.\n\nReturns an array of event class names which are not watched anymore,\ni.e. those which have *zero* subscribers after this method call.\n\n```\nchannel.subscribe(Object, MyEvent) do |event|\n  pp event\nend\n\nchannel.unsubscribe(Object, MyEvent) # => [\"MyEvent\"]\n```","summary":"<p>Unsubscribe an <em>object</em> from all <em>event</em> notifications.</p>","abstract":false,"args":[{"name":"object","doc":null,"default_value":"","external_name":"object","restriction":""},{"name":"event","doc":null,"default_value":"","external_name":"event","restriction":"T.class"}],"args_string":"(object, event : <span class=\"t\">T</span>.<span class=\"k\">class</span>) : Enumerable(String) forall T","source_link":"https://github.com/onyxframework/eda/blob/6a6a7d56b820aca7b5ead0cee6a063627d3287a4/src/onyx-eda/channel.cr#L124","def":{"name":"unsubscribe","args":[{"name":"object","doc":null,"default_value":"","external_name":"object","restriction":""},{"name":"event","doc":null,"default_value":"","external_name":"event","restriction":"T.class"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Enumerable(String)","visibility":"Public","body":"remove_subscription(object, event)"}},{"id":"unsubscribe(object):Enumerable(String)-instance-method","html_id":"unsubscribe(object):Enumerable(String)-instance-method","name":"unsubscribe","doc":"Unsubscribe an *object* from all events.\n\nReturns an array of event class names which are not watched anymore,\ni.e. those which have *zero* subscribers after this method call.\n\n```\nchannel.subscribe(Object, MyEvent) do |event|\n  pp event\nend\n\nchannel.unsubscribe(Object) # => [\"MyEvent\"]\n```","summary":"<p>Unsubscribe an <em>object</em> from all events.</p>","abstract":false,"args":[{"name":"object","doc":null,"default_value":"","external_name":"object","restriction":""}],"args_string":"(object) : Enumerable(String)","source_link":"https://github.com/onyxframework/eda/blob/6a6a7d56b820aca7b5ead0cee6a063627d3287a4/src/onyx-eda/channel.cr#L140","def":{"name":"unsubscribe","args":[{"name":"object","doc":null,"default_value":"","external_name":"object","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Enumerable(String)","visibility":"Public","body":"remove_subscription(object)"}}],"macros":[],"types":[{"html_id":"github.com/onyxframework/eda/Onyx/EDA/Channel/ProcNotSubscribedError","path":"Onyx/EDA/Channel/ProcNotSubscribedError.html","kind":"class","full_name":"Onyx::EDA::Channel::ProcNotSubscribedError","name":"ProcNotSubscribedError","abstract":false,"superclass":{"html_id":"github.com/onyxframework/eda/Exception","kind":"class","full_name":"Exception","name":"Exception"},"ancestors":[{"html_id":"github.com/onyxframework/eda/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"github.com/onyxframework/eda/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/onyxframework/eda/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"onyx-eda/channel.cr","line_number":302,"url":"https://github.com/onyxframework/eda/blob/6a6a7d56b820aca7b5ead0cee6a063627d3287a4/src/onyx-eda/channel.cr"}],"repository_name":"github.com/onyxframework/eda","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/onyxframework/eda/Onyx/EDA/Channel","kind":"class","full_name":"Onyx::EDA::Channel","name":"Channel"},"doc":"Raised if attempted to call [`Channel#unsubscribe(object, event, &proc`)](../Channel.html#unsubscribe%28object%2Cevent%3AT.class%2C%26proc%3AT-%3ENil%29%3AEnumerable%28String%29forallT-instance-method)\nwith a *proc*, which is not currently in the list of subscribers.\n\nTypical mistake:\n\n```\nchannel.subscribe(Object, MyEvent) do |event|\n  pp event\nend\n\nchannel.unsubscribe(Object, MyEvent) do |event|\n  pp event\nend\n```\n\nThe code above would raise, because these blocks result in two different procs.\nValid approach:\n\n```\nproc = ->(event : MyEvent) { pp event }\nchannel.subscribe(Object, MyEvent, &proc)\nchannel.unsubscribe(Object, MyEvent, &proc)\n```","summary":"<p>Raised if attempted to call <a href=\"../Channel.html#unsubscribe%28object%2Cevent%3AT.class%2C%26proc%3AT-%3ENil%29%3AEnumerable%28String%29forallT-instance-method\" target=\"_blank\"><code>Channel#unsubscribe(object, event, &proc</code>)</a> with a <em>proc</em>, which is not currently in the list of subscribers.</p>","class_methods":[],"constructors":[{"id":"new(proc)-class-method","html_id":"new(proc)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"proc","doc":null,"default_value":"","external_name":"proc","restriction":""}],"args_string":"(proc)","source_link":"https://github.com/onyxframework/eda/blob/6a6a7d56b820aca7b5ead0cee6a063627d3287a4/src/onyx-eda/channel.cr#L303","def":{"name":"new","args":[{"name":"proc","doc":null,"default_value":"","external_name":"proc","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(proc)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[],"macros":[],"types":[]},{"html_id":"github.com/onyxframework/eda/Onyx/EDA/Channel/Redis","path":"Onyx/EDA/Channel/Redis.html","kind":"class","full_name":"Onyx::EDA::Channel::Redis","name":"Redis","abstract":false,"superclass":{"html_id":"github.com/onyxframework/eda/Onyx/EDA/Channel","kind":"class","full_name":"Onyx::EDA::Channel","name":"Channel"},"ancestors":[{"html_id":"github.com/onyxframework/eda/Onyx/EDA/Channel","kind":"class","full_name":"Onyx::EDA::Channel","name":"Channel"},{"html_id":"github.com/onyxframework/eda/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/onyxframework/eda/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"onyx-eda/channel/redis.cr","line_number":29,"url":"https://github.com/onyxframework/eda/blob/6a6a7d56b820aca7b5ead0cee6a063627d3287a4/src/onyx-eda/channel/redis.cr"}],"repository_name":"github.com/onyxframework/eda","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/onyxframework/eda/Onyx/EDA/Channel","kind":"class","full_name":"Onyx::EDA::Channel","name":"Channel"},"doc":"A Redis event channel. It relies on [Redis streams](https://redis.io/topics/streams-intro),\nthus requiring Redis version >= 5.\n\nIt works exactly the same as the parent `Channel`, but instead of memory it uses Redis.\nIt spawns the redis subscription routine right after initialization, in a separate fiber.\n\n```\nchannel = Onyx::EDA::Channel::Redis.new(ENV[\"REDIS_URL\"])\n\nchannel.subscribe(Object, MyEvent) do |event|\n  pp event\nend\n\nchannel.unsubscribe(Object, MyEvent)\n```","summary":"<p>A Redis event channel.</p>","class_methods":[],"constructors":[{"id":"new(uri:URI,namespace:String=&quot;onyx-eda&quot;)-class-method","html_id":"new(uri:URI,namespace:String=&amp;quot;onyx-eda&amp;quot;)-class-method","name":"new","doc":"Initialize with Redis *uri* and Redis *namespace*.","summary":"<p>Initialize with Redis <em>uri</em> and Redis <em>namespace</em>.</p>","abstract":false,"args":[{"name":"uri","doc":null,"default_value":"","external_name":"uri","restriction":"URI"},{"name":"namespace","doc":null,"default_value":"\"onyx-eda\"","external_name":"namespace","restriction":"String"}],"args_string":"(uri : URI, namespace : String = <span class=\"s\">&quot;onyx-eda&quot;</span>)","source_link":"https://github.com/onyxframework/eda/blob/6a6a7d56b820aca7b5ead0cee6a063627d3287a4/src/onyx-eda/channel/redis.cr#L35","def":{"name":"new","args":[{"name":"uri","doc":null,"default_value":"","external_name":"uri","restriction":"URI"},{"name":"namespace","doc":null,"default_value":"\"onyx-eda\"","external_name":"namespace","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"new(MiniRedis.new(uri), MiniRedis.new(uri), namespace)"}},{"id":"new(uri:String,namespace:String=&quot;onyx-eda&quot;)-class-method","html_id":"new(uri:String,namespace:String=&amp;quot;onyx-eda&amp;quot;)-class-method","name":"new","doc":"Initialize with Redis *uri* and Redis *namespace*.","summary":"<p>Initialize with Redis <em>uri</em> and Redis <em>namespace</em>.</p>","abstract":false,"args":[{"name":"uri","doc":null,"default_value":"","external_name":"uri","restriction":"String"},{"name":"namespace","doc":null,"default_value":"\"onyx-eda\"","external_name":"namespace","restriction":"String"}],"args_string":"(uri : String, namespace : String = <span class=\"s\">&quot;onyx-eda&quot;</span>)","source_link":"https://github.com/onyxframework/eda/blob/6a6a7d56b820aca7b5ead0cee6a063627d3287a4/src/onyx-eda/channel/redis.cr#L40","def":{"name":"new","args":[{"name":"uri","doc":null,"default_value":"","external_name":"uri","restriction":"String"},{"name":"namespace","doc":null,"default_value":"\"onyx-eda\"","external_name":"namespace","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"new(MiniRedis.new(URI.parse(uri)), MiniRedis.new(URI.parse(uri)), namespace)"}},{"id":"new(redis:MiniRedis=MiniRedis.new,sidekick:MiniRedis=MiniRedis.new,namespace:String=&quot;onyx-eda&quot;)-class-method","html_id":"new(redis:MiniRedis=MiniRedis.new,sidekick:MiniRedis=MiniRedis.new,namespace:String=&amp;quot;onyx-eda&amp;quot;)-class-method","name":"new","doc":"Explicitly initialize with two [`MiniRedis`](https://github.com/vladfaust/mini_redis)\ninstances and Redis *namespace*.","summary":"<p>Explicitly initialize with two <a href=\"https://github.com/vladfaust/mini_redis\" target=\"_blank\"><code>MiniRedis</code></a> instances and Redis <em>namespace</em>.</p>","abstract":false,"args":[{"name":"redis","doc":null,"default_value":"MiniRedis.new","external_name":"redis","restriction":"MiniRedis"},{"name":"sidekick","doc":null,"default_value":"MiniRedis.new","external_name":"sidekick","restriction":"MiniRedis"},{"name":"namespace","doc":null,"default_value":"\"onyx-eda\"","external_name":"namespace","restriction":"String"}],"args_string":"(redis : MiniRedis = <span class=\"t\">MiniRedis</span>.<span class=\"k\">new</span>, sidekick : MiniRedis = <span class=\"t\">MiniRedis</span>.<span class=\"k\">new</span>, namespace : String = <span class=\"s\">&quot;onyx-eda&quot;</span>)","source_link":"https://github.com/onyxframework/eda/blob/6a6a7d56b820aca7b5ead0cee6a063627d3287a4/src/onyx-eda/channel/redis.cr#L46","def":{"name":"new","args":[{"name":"redis","doc":null,"default_value":"MiniRedis.new","external_name":"redis","restriction":"MiniRedis"},{"name":"sidekick","doc":null,"default_value":"MiniRedis.new","external_name":"sidekick","restriction":"MiniRedis"},{"name":"namespace","doc":null,"default_value":"\"onyx-eda\"","external_name":"namespace","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(redis, sidekick, namespace)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"emit(events:Enumerable(T))forallT-instance-method","html_id":"emit(events:Enumerable(T))forallT-instance-method","name":"emit","doc":"See `Channel#emit`.","summary":"<p>See <code><a href=\"../../../Onyx/EDA/Channel.html#emit%28events%3AEnumerable%28T%29%29forallT-instance-method\">Channel#emit</a></code>.</p>","abstract":false,"args":[{"name":"events","doc":null,"default_value":"","external_name":"events","restriction":"Enumerable(T)"}],"args_string":"(events : Enumerable(T)) forall T","source_link":"https://github.com/onyxframework/eda/blob/6a6a7d56b820aca7b5ead0cee6a063627d3287a4/src/onyx-eda/channel/redis.cr#L59","def":{"name":"emit","args":[{"name":"events","doc":null,"default_value":"","external_name":"events","restriction":"Enumerable(T)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"response = @sidekick.transaction do |tx|\n  events.each do |event|\n    tx.send(\"XADD\", \"#{@namespace}:#{(event.class.to_s.split(\"::\")).map(&.underscore).join('-')}\", \"*\", \"pld\", event.to_msgpack)\n  end\nend\n(response.raw.as(Array)).map do |v|\n  String.new(v.raw.as(Bytes))\nend\n"}},{"id":"subscribe(object,event:T.class,&proc:T->Nil):Enumerable(String)forallT-instance-method","html_id":"subscribe(object,event:T.class,&amp;proc:T-&gt;Nil):Enumerable(String)forallT-instance-method","name":"subscribe","doc":"See `Channel#subscribe`.","summary":"<p>See <code><a href=\"../../../Onyx/EDA/Channel.html#subscribe%28object%2Cevent%3AT.class%2C%26proc%3AT-%3ENil%29%3AEnumerable%28String%29forallT-instance-method\">Channel#subscribe</a></code>.</p>","abstract":false,"args":[{"name":"object","doc":null,"default_value":"","external_name":"object","restriction":""},{"name":"event","doc":null,"default_value":"","external_name":"event","restriction":"T.class"}],"args_string":"(object, event : <span class=\"t\">T</span>.<span class=\"k\">class</span>, &proc : T -> Nil) : Enumerable(String) forall T","source_link":"https://github.com/onyxframework/eda/blob/6a6a7d56b820aca7b5ead0cee6a063627d3287a4/src/onyx-eda/channel/redis.cr#L76","def":{"name":"subscribe","args":[{"name":"object","doc":null,"default_value":"","external_name":"object","restriction":""},{"name":"event","doc":null,"default_value":"","external_name":"event","restriction":"T.class"}],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"proc","doc":null,"default_value":"","external_name":"proc","restriction":"(T -> Nil)"},"return_type":"Enumerable(String)","visibility":"Public","body":"changed = super(object, event, &proc)\nif changed.empty?\nelse\n  unblock_client\nend\nchanged.map do |k|\n  event_redis_key(k)\nend\n"}},{"id":"unsubscribe(object,event:T.class,&proc:T->Nil):Enumerable(String)forallT-instance-method","html_id":"unsubscribe(object,event:T.class,&amp;proc:T-&gt;Nil):Enumerable(String)forallT-instance-method","name":"unsubscribe","doc":"See `Channel#unsubscribe`.","summary":"<p>See <code><a href=\"../../../Onyx/EDA/Channel.html#unsubscribe%28object%2Cevent%3AT.class%2C%26proc%3AT-%3ENil%29%3AEnumerable%28String%29forallT-instance-method\">Channel#unsubscribe</a></code>.</p>","abstract":false,"args":[{"name":"object","doc":null,"default_value":"","external_name":"object","restriction":""},{"name":"event","doc":null,"default_value":"","external_name":"event","restriction":"T.class"}],"args_string":"(object, event : <span class=\"t\">T</span>.<span class=\"k\">class</span>, &proc : T -> Nil) : Enumerable(String) forall T","source_link":"https://github.com/onyxframework/eda/blob/6a6a7d56b820aca7b5ead0cee6a063627d3287a4/src/onyx-eda/channel/redis.cr#L83","def":{"name":"unsubscribe","args":[{"name":"object","doc":null,"default_value":"","external_name":"object","restriction":""},{"name":"event","doc":null,"default_value":"","external_name":"event","restriction":"T.class"}],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"proc","doc":null,"default_value":"","external_name":"proc","restriction":"(T -> Nil)"},"return_type":"Enumerable(String)","visibility":"Public","body":"changed = super(object, event)\nif changed.empty?\nelse\n  unblock_client\nend\nchanged.map do |k|\n  event_redis_key(k)\nend\n"}},{"id":"unsubscribe(object,event:T.class):Enumerable(String)forallT-instance-method","html_id":"unsubscribe(object,event:T.class):Enumerable(String)forallT-instance-method","name":"unsubscribe","doc":"See `Channel#unsubscribe`.","summary":"<p>See <code><a href=\"../../../Onyx/EDA/Channel.html#unsubscribe%28object%2Cevent%3AT.class%2C%26proc%3AT-%3ENil%29%3AEnumerable%28String%29forallT-instance-method\">Channel#unsubscribe</a></code>.</p>","abstract":false,"args":[{"name":"object","doc":null,"default_value":"","external_name":"object","restriction":""},{"name":"event","doc":null,"default_value":"","external_name":"event","restriction":"T.class"}],"args_string":"(object, event : <span class=\"t\">T</span>.<span class=\"k\">class</span>) : Enumerable(String) forall T","source_link":"https://github.com/onyxframework/eda/blob/6a6a7d56b820aca7b5ead0cee6a063627d3287a4/src/onyx-eda/channel/redis.cr#L90","def":{"name":"unsubscribe","args":[{"name":"object","doc":null,"default_value":"","external_name":"object","restriction":""},{"name":"event","doc":null,"default_value":"","external_name":"event","restriction":"T.class"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Enumerable(String)","visibility":"Public","body":"changed = super(object, event)\nif changed.empty?\nelse\n  unblock_client\nend\nchanged.map do |k|\n  event_redis_key(k)\nend\n"}},{"id":"unsubscribe(object):Enumerable(String)-instance-method","html_id":"unsubscribe(object):Enumerable(String)-instance-method","name":"unsubscribe","doc":"See `Channel#unsubscribe`.","summary":"<p>See <code><a href=\"../../../Onyx/EDA/Channel.html#unsubscribe%28object%2Cevent%3AT.class%2C%26proc%3AT-%3ENil%29%3AEnumerable%28String%29forallT-instance-method\">Channel#unsubscribe</a></code>.</p>","abstract":false,"args":[{"name":"object","doc":null,"default_value":"","external_name":"object","restriction":""}],"args_string":"(object) : Enumerable(String)","source_link":"https://github.com/onyxframework/eda/blob/6a6a7d56b820aca7b5ead0cee6a063627d3287a4/src/onyx-eda/channel/redis.cr#L97","def":{"name":"unsubscribe","args":[{"name":"object","doc":null,"default_value":"","external_name":"object","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Enumerable(String)","visibility":"Public","body":"changed = super(object)\nif changed.empty?\nelse\n  unblock_client\nend\nchanged.map do |k|\n  event_redis_key(k)\nend\n"}}],"macros":[],"types":[]}]},{"html_id":"github.com/onyxframework/eda/Onyx/EDA/Event","path":"Onyx/EDA/Event.html","kind":"module","full_name":"Onyx::EDA::Event","name":"Event","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"onyx-eda/event.cr","line_number":27,"url":"https://github.com/onyxframework/eda/blob/6a6a7d56b820aca7b5ead0cee6a063627d3287a4/src/onyx-eda/event.cr"},{"filename":"onyx-eda/channel/redis.cr","line_number":8,"url":"https://github.com/onyxframework/eda/blob/6a6a7d56b820aca7b5ead0cee6a063627d3287a4/src/onyx-eda/channel/redis.cr"}],"repository_name":"github.com/onyxframework/eda","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/onyxframework/eda/Onyx/EDA","kind":"module","full_name":"Onyx::EDA","name":"EDA"},"doc":"A basic event module to include.\n\nAccording to [Wikipedia](https://en.wikipedia.org/wiki/Event-driven_architecture#Event_flow_layers):\n\n> a significant temporal state or fact\n\nCode example:\n\n```\nstruct MyEvent\n  include Onyx::EDA::Event\n\n  getter foo\n\n  def initialize(@foo : String)\n  end\nend\n\nchannel.subscribe(Object, MyEvent) do |event|\n  puts event.foo\nend\n\nspawn channel.send(MyEvent.new)\n\nsleep # You need to yield the control, see more in Channel docs\n```","summary":"<p>A basic event module to include.</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]}]}]}]}})